::::::::::::::
Factorial.java
::::::::::::::
import java.util.Scanner;
import java.lang.StackOverflowError;
import java.lang.OutOfMemoryError;

public class Factorial {
	static int result = 1;

	public static int factorial(int n) throws StackOverflowError, OutOfMemoryError {
		// int result;
		if (n == 1 || n == 0) {
			return result;
		} else {
			result = n * factorial(n - 1);
			System.out.print(" " + result);
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter factoral number: ");
		int n = sc.nextInt();
		sc.close();
		System.out.print(n + "! =");
		System.out.print(" 1");
		factorial(n);
		System.out.println();
		System.out.println();
		System.out.println("Final answer: " + result);
	}
}

// The factorial fails when n0 > 16.
// This is because integer cannot hold more than (2^31)-1.
// Changing the variable type to long will improve this, up to a certain point.
// In this case, n overflowed at (2^31)-1.

::::::::::::::
FactorialPlus.java
::::::::::::::
import java.util.Scanner;
import java.lang.StackOverflowError;
import java.lang.OutOfMemoryError;

public class FactorialPlus {
	static long result = 1;

	public static long factorial(int n) throws StackOverflowError, OutOfMemoryError {
		// int result;
		if (n == 1 || n == 0) {
			return result;
		} else {
			result = n * factorial(n - 1);
			System.out.print(" " + result);
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter factoral number: ");
		int n = sc.nextInt();
		sc.close();
		System.out.print(n + "! =");
		System.out.print(" 1");
		factorial(n);
		System.out.println();
		System.out.println();
		System.out.println("Final answer: " + result);
	}
}

// The new factorial fails when n1 > 20.
// This is because long can only hold up to (2^63)-1.
// The result cannot be improved since long is the biggest data type.
// In this case, n overflowed at (2^63)-1.
::::::::::::::
FactorialPlusPlus.java
::::::::::::::
import java.util.Scanner;
import java.lang.StackOverflowError;
import java.lang.OutOfMemoryError;
import java.math.BigInteger;

public class FactorialPlusPlus {
	static BigInteger result = new BigInteger("1");

	public static BigInteger factorial(int n) {
		if (n == 1 || n == 0) {
			return result;
		} else {
			for (int i = 1; i <= n; i++) {
				result = result.multiply(new BigInteger(i + ""));
				System.out.print(" " + result);
			}
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter factoral number: ");
		int n = sc.nextInt();
		sc.close();
		System.out.print(n + "! =");
		System.out.print(" 1");
		factorial(n);
		System.out.println();
		System.out.println();
		System.out.println("Final answer: " + result);
	}
}

// This even newer Factorial class uses the BigInteger data type to store the largest possible value in java.
::::::::::::::
TowersOfHanoi.java
::::::::::::::
import java.util.Scanner;

public class TowersOfHanoi {
	static long d = 0;
	static long m = 0;

	public static void solve(int n, String init, String dest, String temp) {
		if (n > 0) {
			solve(n - 1, init, temp, dest);
			System.out.println("Move disk " + n + " from " + init + " to " + dest);
			d++;
			solve(n - 1, temp, dest, init);
		}
		m++;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter amount of disks: ");
		int n = sc.nextInt();
		String init = "A", dest = "C", temp = "B";
		sc.close();
		solve(n, init, dest, temp);
		System.out.println("Done.");
		System.out.println("Amount of disks: " + n);
		System.out.println("Number of disk moves: " + d);
		System.out.println("Number of method calls: " + m);
	}
}
::::::::::::::
RecursiveBiCoeff.java
::::::::::::::
import java.math.BigInteger;
import java.util.Scanner;

public class RecursiveBiCoeff {
	public static BigInteger C(int n, int k) { // Recursively calculates n choose k.
		BigInteger result = new BigInteger("1");
		if (n > k && k > 0) {
			result = C(n - 1, k);
			result = result.add(C(n - 1, k - 1));
		}
		return result;
	}

	public static BigInteger fact(int n) {
		BigInteger result = new BigInteger("1");
		if (n == 1 || n == 0) {
			return result;
		} else {
			for (int i = 1; i <= n; i++) {
				result = result.multiply(new BigInteger(i + ""));
			}
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter n: ");
		int n = sc.nextInt();
		System.out.println("Enter k: ");
		int k = sc.nextInt();
		sc.close();
		System.out.println("(" + n + " choose " + k + ") is " + C(n, k) + ".");
	}
}
::::::::::::::
PascalsTriangle.java
::::::::::::::
import java.util.Scanner;

public class PascalsTriangle {
	public static void pascal(int n) {
		int k = 1; // Column number, increases by 1 with iteration.
		for (int p = 0; p < n; p++) {
			System.out.print("Line " + k++ + ": ");
			for (int i = 0; i <= p; i++) {
				System.out.print(C(p, i) + " ");
			}
			System.out.println();
		}
	}

	public static int C(int n, int k) {
		int result = 1;
		if (k > n - k) {
			k = n - k;
		}
		for (int i = 0; i < k; ++i) {
			result = result * (n - i);
			result = result / (i + 1);
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter n: ");
		int n = sc.nextInt();
		n++;
		sc.close();
		pascal(n);
	}
}
::::::::::::::
IterativeBiCoeff.java
::::::::::::::
import java.math.BigInteger;
import java.util.Scanner;

public class IterativeBiCoeff {
	public static BigInteger C(int n, int k) { // Iteratively calculates n choose k.
		BigInteger result = new BigInteger("1");
		if (k == 0 || k == n) {
			return result;
		} else if (k > n) {
			System.out.println("'k' cannot be bigger than 'n'.");
			return BigInteger.valueOf(0);
		} else {
			BigInteger nFact = fact(n);
			int nKFact = n - k;
			BigInteger nKFactPlus = fact(nKFact);
			BigInteger kFact = fact(k);
			result = nKFactPlus.multiply(kFact);
			result = nFact.divide(result);
			return result;
		}
	}

	public static BigInteger fact(int n) throws StackOverflowError, OutOfMemoryError {
		BigInteger result = new BigInteger("1");
		if (n == 1 || n == 0) {
			return result;
		} else {
			for (int i = 1; i <= n; i++) {
				result = result.multiply(new BigInteger(i + ""));
			}
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter n: ");
		int n = sc.nextInt();
		System.out.println("Enter k: ");
		int k = sc.nextInt();
		sc.close();
		System.out.println("(" + n + " choose " + k + ") is " + C(n, k) + ".");
	}
}
::::::::::::::
FormulaBiCoeff.java
::::::::::::::
import java.math.BigInteger;
import java.util.Scanner;

public class FormulaBiCoeff {
	public static BigInteger C(int n, int k) { // Uses a formula to calculate n choose k.
		BigInteger result = new BigInteger("1");
		BigInteger nFact = fact(n);
		int nKFact = n - k;
		BigInteger nKFactPlus = fact(nKFact);
		BigInteger kFact = fact(k);
		result = nKFactPlus.multiply(kFact);
		result = nFact.divide(result);
		return result;
	}

	public static BigInteger fact(int n) throws StackOverflowError, OutOfMemoryError {
		BigInteger result = new BigInteger("1");
		if (n == 1 || n == 0) {
			return result;
		} else {
			for (int i = 1; i <= n; i++) {
				result = result.multiply(new BigInteger(i + ""));
			}
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter n: ");
		int n = sc.nextInt();
		System.out.println("Enter k: ");
		int k = sc.nextInt();
		sc.close();
		System.out.println("(" + n + " choose " + k + ") is " + C(n, k) + ".");
	}
}
::::::::::::::
SampleRuns.txt
::::::::::::::
*****TowersOfHanoi*****

Enter amount of disks: 0
Done.
Amount of disks: 0
Number of disk moves: 0
Number of method calls: 1

Enter amount of disks: 1
Move disk 1 from A to C
Done.
Amount of disks: 1
Number of disk moves: 1
Number of method calls: 3

Enter amount of disks: 2
Move disk 1 from A to B
Move disk 2 from A to C
Move disk 1 from B to C
Done.
Amount of disks: 2
Number of disk moves: 3
Number of method calls: 7

Enter amount of disks: 3
Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 3 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C
Done.
Amount of disks: 3
Number of disk moves: 7
Number of method calls: 15

Enter amount of disks: 4
Move disk 1 from A to B
Move disk 2 from A to C
Move disk 1 from B to C
Move disk 3 from A to B
Move disk 1 from C to A
Move disk 2 from C to B
Move disk 1 from A to B
Move disk 4 from A to C
Move disk 1 from B to C
Move disk 2 from B to A
Move disk 1 from C to A
Move disk 3 from B to C
Move disk 1 from A to B
Move disk 2 from A to C
Move disk 1 from B to C
Done.
Amount of disks: 4
Number of disk moves: 15
Number of method calls: 31

Enter amount of disks: 5
Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 3 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C
Move disk 4 from A to B
Move disk 1 from C to B
Move disk 2 from C to A
Move disk 1 from B to A
Move disk 3 from C to B
Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 5 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C
Move disk 3 from B to A
Move disk 1 from C to B
Move disk 2 from C to A
Move disk 1 from B to A
Move disk 4 from B to C
Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 3 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C
Done.
Amount of disks: 5
Number of disk moves: 31
Number of method calls: 63

*****RecursiveBiCoeff.java*****

Enter n: 
0
Enter k: 
0
(0 choose 0) is 1.

Enter n: 
100
Enter k: 
0
(100 choose 0) is 1.

Enter n: 
100
Enter k: 
1
(100 choose 1) is 100.

Enter n: 
100
Enter k: 
99
(100 choose 99) is 100.

Enter n: 
7
Enter k: 
7
(7 choose 7) is 1.

Enter n: 
6
Enter k: 
4
(6 choose 4) is 15.

Enter n: 
6
Enter k: 
5
(6 choose 5) is 6.

Enter n: 
6
Enter k: 
3
(6 choose 3) is 20.

Enter n: 
4
Enter k: 
2
(4 choose 2) is 6.

*****PascalsTriangle.java*****

Enter n: 1
Line 1: 1 
Line 2: 1 1 

Enter n: 2
Line 1: 1 
Line 2: 1 1 
Line 3: 1 2 1 

Enter n: 3
Line 1: 1 
Line 2: 1 1 
Line 3: 1 2 1 
Line 4: 1 3 3 1 

Enter n: 4
Line 1: 1 
Line 2: 1 1 
Line 3: 1 2 1 
Line 4: 1 3 3 1 
Line 5: 1 4 6 4 1 

Enter n: 5
Line 1: 1 
Line 2: 1 1 
Line 3: 1 2 1 
Line 4: 1 3 3 1 
Line 5: 1 4 6 4 1 
Line 6: 1 5 10 10 5 1 

Enter n: 6
Line 1: 1 
Line 2: 1 1 
Line 3: 1 2 1 
Line 4: 1 3 3 1 
Line 5: 1 4 6 4 1 
Line 6: 1 5 10 10 5 1 
Line 7: 1 6 15 20 15 6 1 

Enter n: 7
Line 1: 1 
Line 2: 1 1 
Line 3: 1 2 1 
Line 4: 1 3 3 1 
Line 5: 1 4 6 4 1 
Line 6: 1 5 10 10 5 1 
Line 7: 1 6 15 20 15 6 1 
Line 8: 1 7 21 35 35 21 7 1 

Enter n: 8
Line 1: 1 
Line 2: 1 1 
Line 3: 1 2 1 
Line 4: 1 3 3 1 
Line 5: 1 4 6 4 1 
Line 6: 1 5 10 10 5 1 
Line 7: 1 6 15 20 15 6 1 
Line 8: 1 7 21 35 35 21 7 1 
Line 9: 1 8 28 56 70 56 28 8 1 

*****IterativeBiCoeff.java*****

Enter n: 
0
Enter k: 
0
(0 choose 0) is 1.

Enter n: 
100
Enter k: 
0
(100 choose 0) is 1.

Enter n: 
100
Enter k: 
1
(100 choose 1) is 100.

Enter n: 
100
Enter k: 
99
(100 choose 99) is 100.

Enter n: 
7
Enter k: 
7
(7 choose 7) is 1.

Enter n: 
6
Enter k: 
4
(6 choose 4) is 15.

Enter n: 
6
Enter k: 
5
(6 choose 5) is 6.

Enter n: 
6
Enter k: 
3
(6 choose 3) is 20.

Enter n: 
4
Enter k: 
2
(4 choose 2) is 6.

*****FormulaBiCoeff.java*****

Enter n: 
0
Enter k: 
0
(0 choose 0) is 1.

Enter n: 
100
Enter k: 
0
(100 choose 0) is 1.

Enter n: 
100
Enter k: 
1
(100 choose 1) is 100.

Enter n: 
100
Enter k: 
99
(100 choose 99) is 100.

Enter n: 
7
Enter k: 
7
(7 choose 7) is 1.

Enter n: 
6
Enter k: 
4
(6 choose 4) is 15.

Enter n: 
6
Enter k: 
5
(6 choose 5) is 6.

Enter n: 
6
Enter k: 
3
(6 choose 3) is 20.

Enter n: 
4
Enter k: 
2
(4 choose 2) is 6.
::::::::::::::
Conclusions.txt
::::::::::::::
While working on this lab, I learned what BigInteger class is.
I also learned how to program the Pascal's Triangle, as well as the Binomial Coefficient.
I cannot wait to use these methods that I have written in future programs for an effective programming style.
