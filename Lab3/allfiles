::::::::::::::
MyListReferenceBased.java
::::::::::::::
/*
 * Purpose: Data Structure and Algorithms Lab 3 Problem 1
 * Status: Complete and thoroughly tested.
 * Last update: 9/24/18
 * Submitted:  9/24/18
 * Comment: Optional sample values added as well.
 * @author: Kyle Kaminski
 * @version: 1.0
 */

public class MyListReferenceBased implements ListInterface {

	public String toString() {
		return head;
	}

	private Node head; 
	
	public MyListReferenceBased() 
	{
	 numItems = 0;
	 head = null;
	}  // end default constructor

	public boolean isEmpty() 
	{
	 return numItems == 0;
	}  // end isEmpty

	public int size() 
	{
	numItems = list.size();
	return numItems;
	}  // end size

	private Node find(int index) 
	{
	// --------------------------------------------------
	// Locates a specified node in a linked list.
	// Precondition: index is the number of the desired
	// node. Assumes that 0 <= index <= numItems 
	// Postcondition: Returns a reference to the desired 
	// node.
	// --------------------------------------------------
	 Node curr = head;
	 for (int skip = 0; skip < index; skip++) 
	 {
	   curr = curr.getNext();
	 } // end for
	 return curr;
	} // end find

	public Object get(int index) 
	             throws ListIndexOutOfBoundsException 
	{
	 if (index >= 0 && index < numItems) 
	 {
	   // get reference to node, then data in node
	   Node curr = find(index);
	   Object dataItem = curr.getItem();
	   return dataItem;
	 } 
	 else 
	 {
	   throw new ListIndexOutOfBoundsException(
	                  "List index out of bounds exception on get");
	 } // end if
	} // end get

	public void add(int index, Object item)
	               throws ListIndexOutOfBoundsException 
	{
	 if (index >= 0 && index < numItems+1) 
	 {
	   if (index == 0) 
	   {
	     // insert the new node containing item at
	     // beginning of list
	     Node newNode = new Node(item, head);
	     head = newNode;
	   } 
	   else 
	   {
	     Node prev = find(index-1);
	     // insert the new node containing item after 
	     // the node that prev references
	     Node newNode = new Node(item, prev.getNext());
	     prev.setNext(newNode);
	   } // end if
	   numItems++;
	 } 
	 else 
	 {
	   throw new ListIndexOutOfBoundsException(
	                 "List index out of bounds exception on add");
	 } // end if
	}  // end add

	public void remove(int index) 
	                throws ListIndexOutOfBoundsException 
	{
	 if (index >= 0 && index < numItems) 
	 {
	   if (index == 0) 
	   {
	     // delete the first node from the list
	     head = head.getNext();
	   } 
	   else 
	   {
	     Node prev = find(index-1);
	     // delete the node after the node that prev
	     // references, save reference to node
	     Node curr = prev.getNext(); 
	     prev.setNext(curr.getNext());
	   } // end if
	   numItems--;
	 } // end if
	 else 
	 {
	   throw new ListIndexOutOfBoundsException(
	                "List index out of bounds exception on remove");
	 } // end if
	}   // end remove

	public void removeAll() 
	{
	 // setting head to null causes list to be
	 // unreachable and thus marked for garbage 
	 // collection
	 head = null;
	 numItems = 0;
	} // end removeAll

	} // end ListReferenceBased
::::::::::::::
ApplicationProgram.java
::::::::::::::
/*
 * Purpose: Data Structure and Algorithms Lab 3 Problem 2
 * Status: Complete and thoroughly tested.
 * Last update: 9/23/18
 * Submitted:  9/24/18
 * Comment: Optional sample values added as well.
 * Comment: Extra Credit is at the bottom of this class.
 * @author: Kyle Kaminski
 * @version: 1.0
 */

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.ListIterator;
import java.util.Scanner;

public class ApplicationProgram {
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		boolean run = true;
		while (run == true) {
			try {
				ArrayList<String> list = new ArrayList<String>();
				System.out.println("");
				System.out.println("**********");
				System.out.println("1. Insert item to list.");
				System.out.println("2. Remove item from list.");
				System.out.println("3. Get item from list.");
				System.out.println("4. Clear list.");
				System.out.println("5. Display size and content of list.");
				System.out.println("6. Delete largest item in the list.");
				System.out.println("7. Reverse list.");
				System.out.println("8. Exit Program.");
				System.out.print("Make a menu selection now: ");

				int choice = sc.nextInt();

				switch (choice) {
				case 1:
					System.out.println("You are now inserting a new item to the list.");
					System.out.print("Enter item: ");
					String item = sc.next();

					System.out.print("Enter the position to insert the item in: ");
					int index1 = sc.nextInt();

					if (index1 > list.size()) {
						System.out.println("Position specified is out of range.");
					}

					list.add(index1, item);

					System.out.println("Item " + item + " inserted in position " + index1 + " in the list.");
					break;
				case 2:
					if (list.size() == 0) {
						System.out.println("The list is empty, nothing to remove.");
					} else {
						System.out.print("Enter position to remove item from: ");
						int index2 = sc.nextInt();

						if (list.size() >= index2) {
							list.remove(index2);
							System.out.println("Item at index " + index2 + " has been removed.");
						} else {
							System.out.println("That index is not on the list.");
						}
					}
					break;
				case 3:
					if (list.size() == 0) {
						System.out.println("The list is empty, nothing to get.");
					}

					System.out.print("Enter position to retrieve item from: ");
					int index3 = sc.nextInt();
					if (list.size() >= index3) {
						list.get(index3);
						System.out.println(list.get(index3) + " is at index " + index3 + ".");
					} else {
						System.out.println("That index is not on the list.");
					}
					break;
				case 4:
					if (list.isEmpty()) {
						System.out.println("The list is empty, nothing to clear.");
					} else {
						list.clear();
						System.out.println("The list has been cleared.");
					}
					break;
				case 5:
					if (list.size() == 1) {
						System.out.println("The list of size 1 has the following item: ");
						System.out.println("(0)" + list.get(0));
					} else if (list.size() != 0) {
						System.out.println("The list of size " + list.size() + " has the following items: ");
						int p5 = 0;
						while (p5 != list.size()) {
							System.out.println("(" + p5 + ")" + list.get(p5) + " ");
							p5++;
						}
					} else if (list.size() == 0) {
						System.out.println("The list is empty, nothing to display.");
					}
					System.out.println();
					break;
				case 6:
					if (list.isEmpty()) {
						System.out.println("The list is empty, nothing to delete.");
					} else {
						int largest6 = list.get(0).length();
						int index6 = 0;
						for (int i6 = 0; i6 < list.size(); i6++) {
							if (list.get(i6).length() > largest6) {
								largest6 = list.get(i6).length();
								index6 = i6;
							}
						}
						System.out.println("(" + index6 + ") " + list.get(index6) + " will be removed from the list.");
						list.remove(index6);
					}
					break;
				case 7:
					if (list.isEmpty()) {
						System.out.println("The list is empty, nothing to reverse.");
					} else {
						ListIterator i1 = list.listIterator();
						int pos1 = 1;
						int pos2 = list.size();
						ListIterator i2 = list.listIterator(pos2);
						while (pos1 < pos2) {
							Object o1 = i1.next();
							Object o2 = i2.previous();
							i1.set(o2);
							i2.set(o1);
							++pos1;
							--pos2;
						}
						System.out.println("The list has been reversed.");
					}
					break;
				case 8:
					System.out.println("Exiting program...Good Bye.");
					sc.close();
					run = false;
					break;
				default:
					System.out.println("Please choose a valid choice.");
					break;
				}
			} catch (InputMismatchException e) {
				System.out.println("That was not valid choice.");
				System.out.println("The program has ended. Please rerun and try again.");
				sc.close();
				run = false;
			}
		}
	}
}

/** // Extra Credit
private static void iterator() {
	class LRBIterator implements Iterator {
		class innerIterator implements ListIterator {
			@Override
			public void add(Object arg0) {
			}

			@Override
			public boolean hasNext() {
				return false;
			}

			@Override
			public boolean hasPrevious() {
				return false;
			}

			@Override
			public Object next() {
				return null;
			}

			@Override
			public int nextIndex() {
				return 0;
			}

			@Override
			public Object previous() {
				return null;
			}

			@Override
			public int previousIndex() {
				return 0;
			}

			@Override
			public void remove() {
			}

			@Override
			public void set(Object arg0) {
			}
		}

		@Override
		public boolean hasNext() {
			return false;
		}

		@Override
		public Object next() {
			return null;
		}
	}
}
**/
::::::::::::::
SampleRuns.java
::::::::::::::
-----Application Program Sample Runs-----

*****ApplicationProgram.java*****

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list is empty, nothing to display.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 6
The list is empty, nothing to delete.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 7
The list is empty, nothing to reverse.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Data
Enter the position to insert the item in: 0
Item Data inserted in position 0 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 1 has the following item: 
(0)Data


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 7
The list has been reversed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Beverly
Enter the position to insert the item in: 0
Item Beverly inserted in position 0 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 2 has the following items: 
(0)Beverly 
(1)Data 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Jean-Luc
Enter the position to insert the item in: 5
Position specified is out of range.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 2 has the following items: 
(0)Beverly 
(1)Data 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Jean-Luc
Enter the position to insert the item in: 2
Item Jean-Luc inserted in position 2 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Geordi
Enter the position to insert the item in: 2
Item Geordi inserted in position 2 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Worf
Enter the position to insert the item in: 3
Item Worf inserted in position 3 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 5 has the following items: 
(0)Beverly 
(1)Data 
(2)Geordi 
(3)Worf 
(4)Jean-Luc 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 7
The list has been reversed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 7
The list has been reversed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 6
(4) Jean-Luc will be removed from the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 4 has the following items: 
(0)Beverly 
(1)Data 
(2)Geordi 
(3)Worf 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 7
The list has been reversed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 7
The list has been reversed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 2
Enter position to remove item from: 9
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 2
Enter position to remove item from: 3
Item at index 3 has been removed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 3 has the following items: 
(0)Beverly 
(1)Data 
(2)Geordi 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 2
Enter position to remove item from: 0
Item at index 0 has been removed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Wil
Enter the position to insert the item in: 0
Item Wil inserted in position 0 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 3 has the following items: 
(0)Wil 
(1)Data 
(2)Geordi 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 3
Enter position to retrieve item from: 2
Geordi is at index 2.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 3
Enter position to retrieve item from: 0
Wil is at index 0.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 3
Enter position to retrieve item from: 8
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 3 has the following items: 
(0)Wil 
(1)Data 
(2)Geordi 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 6
(2) Geordi will be removed from the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 2 has the following items: 
(0)Wil 
(1)Data 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 6
(1) Data will be removed from the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list of size 1 has the following item: 
(0)Wil


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 4
The list has been cleared.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 5
The list is empty, nothing to display.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 7
The list is empty, nothing to reverse.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Display size and content of list.
6. Delete largest item in the list.
7. Reverse list.
8. Exit Program.
Make a menu selection now: 8
Exiting program...Good Bye.

-----compareToRuns Sample Runs-----

a compared to A is -32
t compared to T is -32
a compared to z is -25
a compared to 1 is 48
1 compared to A is -16
1 compared to 9 is -8
1 compared to 18 is -1
21 compared to 81 is -6
to compared to top is -1
% compared to 0 is -11
::::::::::::::
compareToRuns.java
::::::::::::::
public class compareToRuns {
	public static void main(String args[]) {
		String str1 = "%";
		String str2 = "0";

		int var1 = str1.compareTo(str2);
		System.out.println(str1 + " compared to " + str2 + " is " + var1);
	}
}

::::::::::::::
Findings.java
::::::::::::::
The compareTo method returns the first string that is in the comparison to the second string that is in comparison.
The value that is returned is a positive integer if the first string follows the second string.
The value that is returned is 0 if the strings are equal in value.
-32 is returned by compareTo when used on "a" and "A".
32 is returned by compareTo when used on "t" and "T".
-25 is returned by compareTo when used on "a" and "z".
48 is returned by compareTo when used on "a" and "1".
-16 is returned by compareTo when used on "1" and "A".
-8 is returned by compareTo when used on "1" and "9".
-1 is returned by compareTo when used on "1" and "18".
-6 is returned by compareTo when used on "21" and "81".
-1 is returned by compareTo when used on "to" and "top".
-11 is returned by compareTo when used on "%" and "0".
::::::::::::::
Lab3Conclusions.txt
::::::::::::::
During the creation of Lab 3, I learned that the application program that I wrote for labs 1 and 2 is extremely flexible and can be added to and changed very easily.
This lab has taught me what the compareTo method is in the String class.
This lab has also taught me to use the compareTo method to compare two different strings and see which string holds more value over the other.
Overall, I will use the compareTo method, as well as the String class, a lot more now since I know what they are capable of.
