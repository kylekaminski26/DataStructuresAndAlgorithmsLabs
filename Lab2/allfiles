::::::::::::::
ListArrayBased
::::::::::::::
// ********************************************************
// Array-based implementation of the ADT list.
// ********************************************************

public class ListArrayBased implements ListInterface
{

    private static final int MAX_LIST = 3;
    protected Object []items;  // an array of list items
    protected int numItems;  // number of items in list

    public ListArrayBased()
    {
        items = new Object[MAX_LIST];
        numItems = 0;
    }  // end default constructor

    public boolean isEmpty()
    {
        return (numItems == 0);
    } // end isEmpty

    public int size()
    {
        return numItems;
    }  // end size

    public void removeAll()
    {
        // Creates a new array; marks old array for
        // garbage collection.
        items = new Object[MAX_LIST];
        numItems = 0;
    } // end removeAll

    public void add(int index, Object item)
    throws  ListIndexOutOfBoundsException
    {
        if (numItems == items.length) //fixes programming style
        	//If the size of the list is more than 3.
        {
            throw new ListException("ListException on add");
        }  // end if
        if (index >= 0 && index <= numItems)
        {
            // make room for new element by shifting all items at
            // positions >= index toward the end of the
            // list (no shift if index == numItems+1)
            for (int pos = numItems-1; pos >= index; pos--)  //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException
            {
                items[pos+1] = items[pos];
            } // end for
            // insert new item
            items[index] = item;
            numItems++;
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on add");
        }  // end if
    } //end add

    public Object get(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            return items[index];
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on get");
        }  // end if
    } // end get

    public void remove(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            // delete item by shifting all items at
            // positions > index toward the beginning of the list
            // (no shift if index == size)
            for (int pos = index+1; pos < numItems; pos++) //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException

            {
                items[pos-1] = items[pos];
            }  // end for
            numItems--; //memory leak error
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on remove");
        }  // end if
    } //end remove
}
::::::::::::::
ListArrayBasedPlus
::::::::::::::
/*
 * Purpose: Data Structure and Algorithms Lab 2 Problem 1
 * Status: Complete and thoroughly tested.
 * Last update: 9/17/18
 * Submitted:  9/17/18
 * Comment: Optional sample values added as well.
 * @author: Kyle Kaminski
 * @version: 1.0
 */

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.InputMismatchException;

public class ListArrayBasedPlus extends ListArrayBased {
	public static void main(String[] args) {
		menu();
	}

	static ArrayList<String> list = new ArrayList<String>();

	static Scanner sc = new Scanner(System.in);

	public static void menu() {
		try {
			System.out.println("");
			System.out.println("**********");
			System.out.println("1. Insert item to list.");
			System.out.println("2. Remove item from list.");
			System.out.println("3. Get item from list.");
			System.out.println("4. Clear list.");
			System.out.println("5. Print size and content of list.");
			System.out.println("6. Reverse list.");
			System.out.println("7. Exit Program.");
			System.out.print("Make a menu selection now: ");

			int choice = sc.nextInt();

			switch (choice) {
			case 1:
				add();
				break;
			case 2:
				remove();
				break;
			case 3:
				get();
				break;
			case 4:
				clear();
				break;
			case 5:
				print();
				break;
			case 6:
				reverse();
				break;
			case 7:
				System.out.println("Exiting program...Good Bye.");
				System.exit(0);
				break;
			default:
				System.out.println("Please choose a valid choice.");
				menu();
				break;
			}
		} catch (InputMismatchException e) {
			System.out.println("That was not valid choice.");
			System.out.println("The program has ended. Please rerun and try again.");
			System.exit(0);
		}
	}

	// 1
	private static void add() {
		System.out.println("You are now inserting a new item to the list.");
		System.out.print("Enter item: ");
		String item = sc.next();

		System.out.print("Enter the position to insert the item in: ");
		int index = sc.nextInt();

		if (index > list.size()) {
			System.out.println("Position specified is out of range.");
			menu();
		}

		list.add(index, item);

		System.out.println("Item " + item + " inserted in position " + index + " in the list.");
		menu();
	}

	// 2
	private static void remove() {
		if (list.size() == 0) {
			System.out.println("The list is empty.");
			menu();
		}
		System.out.print("Enter position to remove item from: ");
		int index = sc.nextInt();

		if (list.size() <= index) {
			list.remove(index);
			System.out.println("Item at index " + index + " has been removed.");
		} else {
			System.out.println("That index is not on the list.");
		}
		menu();
	}

	// 3
	private static void get() {
		if (list.size() == 0) {
			System.out.println("The list is empty.");
			menu();
		}

		System.out.print("Enter position to retrieve item from: ");
		int index = sc.nextInt();
		if (list.size() < index) {
			list.get(index);
			System.out.println(list.get(index) + " is at index " + index + ".");
		} else {
			System.out.println("That index is not on the list.");
		}
		menu();
	}

	// 4
	private static void clear() {
		list.clear();
		System.out.println("The list has been cleared.");
		menu();
	}

	// 5
	private static void print() {
		// toString();

		if (list.size() == 1) {
			System.out.println("The list of size 1 has the following item: ");
			System.out.println("(0)" + list.get(0));
		} else if (list.size() != 0) {
			System.out.println("The list of size " + list.size() + " has the following items: ");
			int p = 0;
			while (p != list.size()) {
				System.out.println("(" + p + ")" + list.get(p) + " ");
				p++;
			}
		} else if (list.size() == 0) {
			System.out.println("The list is empty.");
			menu();
		}
		System.out.println();
		menu();
	}

	// 6
	private static void reverse() {
		Collections.reverse(list);
		System.out.println("The list has been reversed.");
		menu();
	}
}
::::::::::::::
SampleRuns
::::::::::::::

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list is empty.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Data
Enter the position to insert the item in: 0
Item Data inserted in position 0 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 1 has the following item: 
(0)Data


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Beverly
Enter the position to insert the item in: 0
Item Beverly inserted in position 0 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 2 has the following items: 
(0)Beverly 
(1)Data 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Jean-Luc
Enter the position to insert the item in: 4
Position specified is out of range.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 2 has the following items: 
(0)Beverly 
(1)Data 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Jean-Luc
Enter the position to insert the item in: 2
Item Jean-Luc inserted in position 2 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Geordi
Enter the position to insert the item in: 1
1Item Geordi inserted in position 1 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 
You are now inserting a new item to the list.
Enter item: Worf
Enter the position to insert the item in: 3
Item Worf inserted in position 3 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 5 has the following items: 
(0)Beverly 
(1)Geordi 
(2)Data 
(3)Worf 
(4)Jean-Luc 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 6
The list has been reversed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 5 has the following items: 
(0)Jean-Luc 
(1)Worf 
(2)Data 
(3)Geordi 
(4)Beverly 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 2
Enter position to remove item from: 0
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 2
Enter position to remove item from: 3
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 5 has the following items: 
(0)Jean-Luc 
(1)Worf 
(2)Data 
(3)Geordi 
(4)Beverly 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 2
Enter position to remove item from: 0
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 1
You are now inserting a new item to the list.
Enter item: Will
Enter the position to insert the item in: 1
Item Will inserted in position 1 in the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 6 has the following items: 
(0)Jean-Luc 
(1)Will 
(2)Worf 
(3)Data 
(4)Geordi 
(5)Beverly 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 3
Enter position to retrieve item from: 2
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 3
Enter position to retrieve item from: 0
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 3
Enter position to retrieve item from: 0
That index is not on the list.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 6 has the following items: 
(0)Jean-Luc 
(1)Will 
(2)Worf 
(3)Data 
(4)Geordi 
(5)Beverly 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 6
The list has been reversed.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list of size 6 has the following items: 
(0)Beverly 
(1)Geordi 
(2)Data 
(3)Worf 
(4)Will 
(5)Jean-Luc 


**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 4
The list has been cleared.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 5
The list is empty.

**********
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit Program.
Make a menu selection now: 7
Exiting program...Good Bye.

::::::::::::::
ListArrayListBased
::::::::::::::
import java.util.ArrayList;

public class ListArrayListBased implements ListInterface {
	
	

	@Override
	public boolean isEmpty() {
		return false;
	}

	@Override
	public int size() {
		return 0;
	}

	@Override
	public void add(int index, Object item) throws ListIndexOutOfBoundsException {
	}

	@Override
	public Object get(int index) throws ListIndexOutOfBoundsException {
		return null;
	}

	@Override
	public void remove(int index) throws ListIndexOutOfBoundsException {
	}

	@Override
	public void removeAll() {
	}

}

::::::::::::::
ListArrayListBasedPlus
::::::::::::::
public class ListArrayListBasedPlus implements ListInterface {

	@Override
	public boolean isEmpty() {
		return false;
	}

	@Override
	public int size() {
		return 0;
	}

	@Override
	public void add(int index, Object item) throws ListIndexOutOfBoundsException {
	}

	@Override
	public Object get(int index) throws ListIndexOutOfBoundsException {
		return null;
	}

	@Override
	public void remove(int index) throws ListIndexOutOfBoundsException {
	}

	@Override
	public void removeAll() {
	}
}
::::::::::::::
ListInterface
::::::::::::::
// ********************************************************
// Interface ListInterface for the ADT list.
// *********************************************************
public interface ListInterface 
{
  boolean isEmpty();
  int size();
  void add(int index, Object item) 
                  throws ListIndexOutOfBoundsException;
  Object get(int index) 
                    throws ListIndexOutOfBoundsException;
  void remove(int index) 
                     throws ListIndexOutOfBoundsException;
  void removeAll();
}  // end ListInterface

/**

public void add(int index, E element) {
    rangeCheckForAdd(index);

public E get(int index) {
            rangeCheck(index);
            checkForComodification();
            return ArrayList.this.elementData(offset + index);
        }
        
        public void remove() {
            if (lastRet < 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList.this.remove(lastRet);
                cursor = lastRet;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }
        
        public boolean removeAll(Collection<?> c) {
        Objects.requireNonNull(c);
        return batchRemove(c, false);
    }

**/
::::::::::::::
Conclusions
::::::::::::::
During this lab, I learned how to further use the array list class into my program.
Having the ability to store my user data in a list, and then interact with that data in any way I want, can make my code so much more compatible and flexible.
I hope to use this knowledge of array lists in my future programs.
