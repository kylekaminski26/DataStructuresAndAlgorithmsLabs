Here are the steps for if Merge Sort split the problem into 3 arrays:
1. Sub arrays 1, 2 and 3 are initialized.
2. Sub array 1 is middle - left + 1.
3. Sub array 2 is the middle.
4. Sub array 3 is right - middle;
5. Left, Middle, and Right arrays are initialized.
6. All elements less than the pivot are added to the left array.
7. The pivot is added to the middle array.
8. All elements more than the pivot are added to the right array.
9. i and j are created.
10. k is the left and h is the right of the pivot.
11. Move the pivot accordingly in all of the arrays, based on what is less than the pivot and what is greater than.
12. Send the arrays to the sort method so they can be sorted.

The time complexity of the Merge method is 1, because the Merge method is called once.
The time complexity of the Sort method is 2n-1.

The recurrence relation of Merge sort is T(n) = 2 T(n/2) + O(n).

For Merge sort, the exact closed form solution is Merge(list, left, middle, right);
This means that when left is less than right, the list array is sent to the Merge method to be sorted.

The time complexity of Merge sort is O(nlogn).
