::::::::::::::
PreLab
::::::::::::::
Here are the steps for if Merge Sort split the problem into 3 arrays:
1. Sub arrays 1, 2 and 3 are initialized.
2. Sub array 1 is middle - left + 1.
3. Sub array 2 is the middle.
4. Sub array 3 is right - middle;
5. Left, Middle, and Right arrays are initialized.
6. All elements less than the pivot are added to the left array.
7. The pivot is added to the middle array.
8. All elements more than the pivot are added to the right array.
9. i and j are created.
10. k is the left and h is the right of the pivot.
11. Move the pivot accordingly in all of the arrays, based on what is less than the pivot and what is greater than.
12. Send the arrays to the sort method so they can be sorted.

The time complexity of the Merge method is 1, because the Merge method is called once.
The time complexity of the Sort method is 2n-1.

The recurrence relation of Merge sort is T(n) = 2 T(n/2) + O(n).

For Merge sort, the exact closed form solution is Merge(list, left, middle, right);
This means that when left is less than right, the list array is sent to the Merge method to be sorted.

The time complexity of Merge sort is O(nlogn).
::::::::::::::
IterativeMergeSort
::::::::::::::
package Lab10;

import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Scanner;

public class IterativeMergeSort {
	static Scanner sc = new Scanner(System.in);
	static int comp = 0; // number of comparisons. Will increment in the method loops.
	static int[] list = new int[0];

	public static void main(String args[]) {
		try {
			System.out.print("Enter number of integers: ");
			int numInt = sc.nextInt();

			list = new int[numInt]; // Collects user data into a list of integers.

			System.out.println();

			if (numInt <= 0) {
				System.out.println("Please choose a correct number of integers.");
				sc.close();
				return;
			} else {
				for (int a = 1; numInt >= a; a++) { // For when there are still more integers to be inputed.
					int b = a - 1;
					System.out.print("Enter integer number " + a + ": ");
					int newInt = sc.nextInt();
					list[b] = newInt;
					// Asks user to input all of their integers.
				}
				System.out.println("\nInput Data: ");
				System.out.println(Arrays.toString(list)); // Prints the list of user data.
				System.out.println();
			}
		} catch (InputMismatchException e) {
			System.out.println("Please enter a valid value.");
			return;
		}

		IMerge(list); // Sends user data to the Iterative Merge Sort method.

		System.out.println("Sorted Data: ");
		System.out.println(Arrays.toString(list)); // Prints the list of newly sorted data.
		System.out.println("\nNumber of comparisons: " + comp);
	}

	public static void IMerge(int sorted[]) {
		if (sorted.length > 1) {
			int middle = sorted.length / 2; // Middle is half the length of the original array.
			int[] left = new int[middle]; // Splits in half, from the left to the middle.
			for (int i = 0; i < middle; i++) { // All elements less than the middle are put in the left array.
				left[i] = sorted[i];
				comp++;
			}
			int[] right = new int[sorted.length - middle]; // Splits in half, from the right to the middle.
			for (int i = middle; i < sorted.length; i++) { // All elements more than the middle are put in the right array.
				right[i - middle] = sorted[i];
				comp++;
			}
			int i = 0; // Left of the middle.
			int j = 0; // Right of the middle.
			int k = 0; // Will be the value of an element to be used in sorting.
			while (i < left.length && j < right.length) { // Iterative part of the merge sort.
				if (left[i] < right[j]) {
					sorted[k] = left[i]; // Add elements to the left array.
					i++;
				} else {
					sorted[k] = right[j]; // Add elements to the right array.
					j++;
				}
				k++;
			}
			while (i < left.length) { // Collect remaining elements in the left array.
				sorted[k] = left[i]; // Place elements in the sorted array.
				i++;
				k++;
				comp++; // Count comparisons.
			}
			while (j < right.length) { // Collect remaining elements in the right array.
				sorted[k] = right[j]; // Place elements in the sorted array.
				j++;
				k++;
				comp++; // Count comparisons.
			}
		} else {
			return; // Do nothing if the array is empty.
		}
	}
}

::::::::::::::
RecursiveQuickSort
::::::::::::::
package Lab10;

import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Scanner;

public class RecursiveQuickSort {
	static Scanner sc = new Scanner(System.in);
	static int comp = 0; // number of comparisons. Will increment in the method loops.
	static int[] list = new int[0];

	public static void main(String args[]) {
		try {
			System.out.print("Enter number of integers: ");
			int numInt = sc.nextInt();
			list = new int[numInt]; // Collects user data into a list of integers.
			System.out.println();
			if (numInt <= 0) {
				System.out.println("Please choose a correct number of integers.");
				sc.close();
				return;
			} else {
				for (int a = 1; numInt >= a; a++) { // For when there are still more integers to be inputed.
					int b = a - 1;
					System.out.print("Enter integer number " + a + ": ");
					int newInt = sc.nextInt();
					list[b] = newInt;
					// Asks user to input all of their integers.
				}
				System.out.println("\nInput Data: ");
				System.out.println(Arrays.toString(list) + "\n"); // Prints the list of user data.
			}
		} catch (InputMismatchException e) {
			System.out.println("Please enter a valid value.");
			return;
		}
		RQuickSort(list, 0, list.length - 1); // Sends user data to the Recursive Quick Sort method.
		System.out.println("Sorted Data: \n" + Arrays.toString(list)); // Prints the list of newly sorted data.
		System.out.println("\nNumber of comparisons: " + comp);
	}

	public static void RQuickSort(int[] list, int start, int end) {
		int i = RQuickSortPartition(list, start, end); // Calls the partition method until the index is the left part of the array.
		if (start < i - 1) { // Recurse until the index is less than 0.
			RQuickSort(list, start, i - 1); // Recursively calls this method until the index is the same as the right half of the array.
		}
		if (end > i) { // If the end of the array is less than the index.
			RQuickSort(list, i, end); // Recursively calls this method until the index is the same as the left half of the array.
		}
	}

	public static int RQuickSortPartition(int[] list, int left, int right) {
		int p = list[left]; // The first element in the left array is the pivot.
		while (left <= right) { // While the left is less than or equal to the right of the array.
			while (list[left] < p) { // While the left of the array is less than the pivot.
				left++; // Increment the left of the array (moves toward the middle).
				comp++;
			}
			while (list[right] > p) { // While the right of the array is more than the pivot.
				right--; // Decrement the right of the array (moves towards the middle).
				comp++;
			}
			if (left <= right) { // If the left is less than or equal to the right.
				int temp = list[left]; // Make the temp variable the same as the left of the array.
				list[left] = list[right]; // Makes the left array the same as the right.
				list[right] = temp; // Puts the right array into temp.
				left++; // Increment the left value (moves towards middle).
				right--; // Decrement the right value (moves towards middle).
			}
		}
		return left; // Returns the whole sorted array, which was stored in the left variable.
	}
}
::::::::::::::
SampleRuns
::::::::::::::
*****IterativeMergeSort*****

Enter number of integers: 1

Enter integer number 1: 1

Input Data: 
[1]

Sorted Data: 
[1]

Number of comparisons: 0

Enter number of integers: 3

Enter integer number 1: 3
Enter integer number 2: 2
Enter integer number 3: 1

Input Data: 
[3, 2, 1]

Sorted Data: 
[2, 1, 3]

Number of comparisons: 4

Enter number of integers: 6

Enter integer number 1: 1
Enter integer number 2: 6
Enter integer number 3: 2
Enter integer number 4: 5
Enter integer number 5: 3
Enter integer number 6: 4

Input Data: 
[1, 6, 2, 5, 3, 4]

Sorted Data: 
[1, 5, 3, 4, 6, 2]

Number of comparisons: 8

*****RecursiveQuickSort*****

Enter number of integers: 1

Enter integer number 1: 1

Input Data: 
[1]

Sorted Data: 
[1]

Number of comparisons: 0

Enter number of integers: 3

Enter integer number 1: 3
Enter integer number 2: 2
Enter integer number 3: 1

Input Data: 
[3, 2, 1]

Sorted Data: 
[1, 2, 3]

Number of comparisons: 2

Enter number of integers: 5

Enter integer number 1: 5
Enter integer number 2: 1
Enter integer number 3: 4
Enter integer number 4: 2
Enter integer number 5: 3

Input Data: 
[5, 1, 4, 2, 3]

Sorted Data: 
[1, 2, 3, 4, 5]

Number of comparisons: 5

::::::::::::::
Conclusions
::::::::::::::
During the creation of this lab, I learned how to make a Recursive Quick Sort, as well as an Iterative Merge Sort.
The Recursive Quick Sort calls itself over and over to sort the array.
The Iterative Merge Sort uses iteration to sort its array.
These methods gets the job done and are useful methods for sorting arrays.
